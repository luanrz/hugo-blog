<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Docker on luanrz's blog</title><link>https://blog.luanrz.cn/tags/docker/</link><description>Recent content in Docker on luanrz's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 11 Dec 2022 11:01:19 +0800</lastBuildDate><atom:link href="https://blog.luanrz.cn/tags/docker/index.xml" rel="self" type="application/rss+xml"/><item><title>Java应用部署K8S全流程：Docker镜像制作、Harbor镜像存储与Helm应用部署</title><link>https://blog.luanrz.cn/posts/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/java%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2k8s%E5%85%A8%E6%B5%81%E7%A8%8Bdocker%E9%95%9C%E5%83%8F%E5%88%B6%E4%BD%9Charbor%E9%95%9C%E5%83%8F%E4%B8%8A%E4%BC%A0%E4%B8%8Ehelm%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/</link><pubDate>Sun, 11 Dec 2022 11:01:19 +0800</pubDate><guid>https://blog.luanrz.cn/posts/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/java%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2k8s%E5%85%A8%E6%B5%81%E7%A8%8Bdocker%E9%95%9C%E5%83%8F%E5%88%B6%E4%BD%9Charbor%E9%95%9C%E5%83%8F%E4%B8%8A%E4%BC%A0%E4%B8%8Ehelm%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/</guid><description>一、前言 Java应用部署到K8S（Kubernetes），一般需要镜像制作、镜像存储与应用部署这三个步骤。
镜像制作：根据Java源代码生成符合OCI（开放容器标准）的镜像。可以使用Docker完成镜像制作。 镜像存储：将镜像上传到镜像仓库以便后续使用。这里的镜像仓库一般是指Harbor。 应用部署：根据镜像仓库中的镜像及其对应配置，将应用部署到K8S集群。K8S原生支持手动编写配置文件实现应用部署，Helm简化了应用部署的过程。 为了更好地理解云环境部署，可以类比传统的虚机部署。在云环境部署中：
镜像制作就相当于：maven打包生成war包（实际上war包是镜像的一部分）。 镜像存储就相当于：将war包上传到Maven仓库。 应用部署就相当于：将Maven仓库中的war包安装到JBoss容器。 在此正式介绍上述三个过程之前，还需要准备一些环境。除了Java基础环境之外，还需要准备一个Docker环境与Kubernete集群（可以使用minikube）。
国内网络环境启动minikube时，可以使用：minikube start --image-mirror-country='cn' --kubernetes-version=v1.23.13指令，其中，cn表示使用国内镜像，v1.23.13指定K8S版本小于v1.24，具体原因参见Kubernetes 1.24 中的移除和弃用。
二、Docker镜像制作 Docker制作的镜像符合OCI标准，可以直接在K8S中运行。本地制作的镜像一般需要上传到Harbor仓库。
（一）准备一个Java项目 使用spring-web搭建一个简单的web项目，pom文件如下：
&amp;lt;project&amp;gt; ... &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; &amp;lt;build&amp;gt; &amp;lt;plugins&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;/plugins&amp;gt; &amp;lt;/build&amp;gt; ... &amp;lt;/project&amp;gt; 启动类如下：
@SpringBootApplication @RestController public class Application { @RequestMapping(&amp;#34;/index.html&amp;#34;) public String home() throws InterruptedException { return &amp;#34;Hello World&amp;#34;; } public static void main(String[] args) { SpringApplication.run(Application.class, args); } } （二）编写Dockerfile脚本 在项目根目录下新建文件Dockerfile，内容如下：
FROM maven:3.8.4-openjdk-8-slim AS base WORKDIR /app COPY pom.</description></item><item><title>Kubernetes入门</title><link>https://blog.luanrz.cn/posts/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/kubernetes%E5%85%A5%E9%97%A8/</link><pubDate>Fri, 01 Jul 2022 11:30:48 +0000</pubDate><guid>https://blog.luanrz.cn/posts/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/kubernetes%E5%85%A5%E9%97%A8/</guid><description>&lt;p>kubernetes（k8s）是容器编排的利器。&lt;/p>
&lt;p>本文将介绍kubernetes本地环境的安装与基础使用，包括：创建集群、部署应用、故障排除、暴露服务、缩放应用、更新应用等内容，这里面大部分内容都来自于&lt;a href="https://kubernetes.io/zh-cn/docs/tutorials/">Kubernetes官方教程&lt;/a>。&lt;/p></description></item></channel></rss>