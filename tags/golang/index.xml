<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Golang on luanrz's blog</title><link>https://blog.luanrz.cn/tags/golang/</link><description>Recent content in Golang on luanrz's blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 13 Dec 2022 14:22:49 +0800</lastBuildDate><atom:link href="https://blog.luanrz.cn/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>Sleuth在K8S中的连接重置问题</title><link>https://blog.luanrz.cn/posts/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/sleuth%E5%9C%A8k8s%E4%B8%AD%E7%9A%84%E8%BF%9E%E6%8E%A5%E9%87%8D%E7%BD%AE%E9%97%AE%E9%A2%98/</link><pubDate>Tue, 13 Dec 2022 14:22:49 +0800</pubDate><guid>https://blog.luanrz.cn/posts/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/sleuth%E5%9C%A8k8s%E4%B8%AD%E7%9A%84%E8%BF%9E%E6%8E%A5%E9%87%8D%E7%BD%AE%E9%97%AE%E9%A2%98/</guid><description>一、前言 Sleuth是Java中的一种链路追踪组件
最近在使用K8S部署Java应用时，发现引入Sleuth组件后，日志中将会出现大量“Connection reset by peer”（连接重置）错误。这个错误不影响正常业务流程，但会极大污染日志内容。下面记录一下此问题的排查过程，以便后续参考。
（如果不想看过程的话，可以直接跳转到结论部分）
二、问题复现 首先，K8S集群中要有一个可以正常运行的Java应用，K8S健康检查的服务路径是/doc.html（该服务由应用的Swagger组件提供）。
随后，引入Sleuth组件。在pom文件中加入下述依赖：
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.cloud&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-cloud-starter-zipkin&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; Sleuth可以与Zipkin组合使用，它们的默认都是开启状态，为了隔离影响，先把Zipkin关掉，修改application.yml文件如下：
spring: sleuth: enabled: true zipkin: enabled: false 最后，重新打镜像部署，启动容器之后，查看日志可以发现以下报错：
TraceFilter.java:171 - Uncaught exception thrown org.apache.catalina.connector.ClientAbortException: java.io.IOException: Connection reset by peer at org.apache.catalina.connector.OutputBuffer.realWriteBytes(OutputBuffer.java:356) at org.apache.catalina.connector.OutputBuffer.flushByteBuffer(OutputBuffer.java:815) at org.apache.catalina.connector.OutputBuffer.append(OutputBuffer.java:720) at org.apache.catalina.connector.OutputBuffer.writeBytes(OutputBuffer.java:391) at org.apache.catalina.connector.OutputBuffer.write(OutputBuffer.java:369) at org.apache.catalina.connector.CoyoteOutputStream.write(CoyoteOutputStream.java:96) at org.springframework.cloud.sleuth.instrument.web.TraceServletOutputStream.write(TraceServletOutputStream.java:120) ... Caused by: java.io.IOException: Connection reset by peer at sun.nio.ch.FileDispatcherImpl.write0(Native Method) at sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:47) at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:93) ... 三、排查过程 （一）打印更多日志 通过日志的第一行可以看到这个报错可能与TraceFilter类有关（该类位于Sleuth包中），通过阅读源码发现有部分日志是DEBUG级别。因此，为了在日志中得到更多信息，需要修改日志级别，在java启动命令后加上如下参数：
--logging.level.root=DEBUG \ --logging.level.org.springframework.web.servlet.DispatcherServlet=DEBUG \ --logging.</description></item><item><title>Java应用部署K8S全流程：Docker镜像制作、Harbor镜像存储与Helm应用部署</title><link>https://blog.luanrz.cn/posts/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/java%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2k8s%E5%85%A8%E6%B5%81%E7%A8%8Bdocker%E9%95%9C%E5%83%8F%E5%88%B6%E4%BD%9Charbor%E9%95%9C%E5%83%8F%E4%B8%8A%E4%BC%A0%E4%B8%8Ehelm%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/</link><pubDate>Sun, 11 Dec 2022 11:01:19 +0800</pubDate><guid>https://blog.luanrz.cn/posts/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/java%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2k8s%E5%85%A8%E6%B5%81%E7%A8%8Bdocker%E9%95%9C%E5%83%8F%E5%88%B6%E4%BD%9Charbor%E9%95%9C%E5%83%8F%E4%B8%8A%E4%BC%A0%E4%B8%8Ehelm%E5%BA%94%E7%94%A8%E9%83%A8%E7%BD%B2/</guid><description>一、前言 Java应用部署到K8S（Kubernetes），一般需要镜像制作、镜像存储与应用部署这三个步骤。
镜像制作：根据Java源代码生成符合OCI（开放容器标准）的镜像。可以使用Docker完成镜像制作。 镜像存储：将镜像上传到镜像仓库以便后续使用。这里的镜像仓库一般是指Harbor。 应用部署：根据镜像仓库中的镜像及其对应配置，将应用部署到K8S集群。K8S原生支持手动编写配置文件实现应用部署，Helm简化了应用部署的过程。 为了更好地理解云环境部署，可以类比传统的虚机部署。在云环境部署中：
镜像制作就相当于：maven打包生成war包（实际上war包是镜像的一部分）。 镜像存储就相当于：将war包上传到Maven仓库。 应用部署就相当于：将Maven仓库中的war包安装到JBoss容器。 在此正式介绍上述三个过程之前，还需要准备一些环境。除了Java基础环境之外，还需要准备一个Docker环境与Kubernete集群（可以使用minikube）。
国内网络环境启动minikube时，可以使用：minikube start --image-mirror-country='cn' --kubernetes-version=v1.23.13指令，其中，cn表示使用国内镜像，v1.23.13指定K8S版本小于v1.24，具体原因参见Kubernetes 1.24 中的移除和弃用。
二、Docker镜像制作 Docker制作的镜像符合OCI标准，可以直接在K8S中运行。本地制作的镜像一般需要上传到Harbor仓库。
（一）准备一个Java项目 使用spring-web搭建一个简单的web项目，pom文件如下：
&amp;lt;project&amp;gt; ... &amp;lt;dependencies&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-web&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;/dependencies&amp;gt; &amp;lt;build&amp;gt; &amp;lt;plugins&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;/plugin&amp;gt; &amp;lt;/plugins&amp;gt; &amp;lt;/build&amp;gt; ... &amp;lt;/project&amp;gt; 启动类如下：
@SpringBootApplication @RestController public class Application { @RequestMapping(&amp;#34;/index.html&amp;#34;) public String home() throws InterruptedException { return &amp;#34;Hello World&amp;#34;; } public static void main(String[] args) { SpringApplication.run(Application.class, args); } } （二）编写Dockerfile脚本 在项目根目录下新建文件Dockerfile，内容如下：
FROM maven:3.8.4-openjdk-8-slim AS base WORKDIR /app COPY pom.</description></item><item><title>Hugo快速上手</title><link>https://blog.luanrz.cn/posts/%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/hugo%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/</link><pubDate>Mon, 17 Oct 2022 20:50:15 +0800</pubDate><guid>https://blog.luanrz.cn/posts/%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/hugo%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B/</guid><description>Hugo是使用Go语言实现的静态博客生成工具，它的构建速度比Hexo更快。
一、安装Hugo 以Linux与Mac为例，Hugo安装指令如下所示：
pacman -S hugo # ArchLinux brew install hugo #MacOS 在命令行输入hugo version，正确显示了版本号，即证明安装成功了。更详细的安装过程可参见hugo官方安装教程
二、初始Hugo化项目 （一）新建站点 hugo new site hugodemo cd hugodemo git init （二）新建文章 hugo new posts/hello.md 新建文章时，会依据archetypes/default.md为模版创建文件，文件将被放在content文件夹下面，hello.md的内容如下所示：
--- title: &amp;#34;Hello&amp;#34; date: 2022-10-17T21:07:47+08:00 draft: true --- （三）增加主题 主题位于themes文件夹下，可以使用Git子模块导入喜欢的主题，以PaperMod主题为例：
git submodule add --depth=1 https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod git submodule update --init --recursive # 仅在后续重新拉取hugodemo项目时，才需要执行此命令 （四）启动Hugo hugo server -t PaperMod -D server指令表示启动Hugo服务。
-t(--theme)指定了主题名，后续也可以在配置文件中指定主题。
-D(--buildDrafts)表示编译文章头部的draft标识为true的草稿文章，刚刚创建的hello.md就是一篇草稿文章。
（五）访问站点 在终端执行curl http://localhost:1313，或在浏览器中访问http://localhost:1313，即可看到应用启动成功，刚刚写的第一篇hello文章显示在了首页。
三、配置PaperMod主题 未经配置的PaperMod页面还不太完整，下面将简单介绍PaperMod主题的配置过程。
首先，将根目录的config.toml重命名为config.yml，并将其中的= 换成:。随后，继续编辑config.yml，完整的配置文件如下：
baseURL: &amp;#34;https://blog.luanrz.cn/&amp;#34; languageCode: &amp;#34;zh-cn&amp;#34; title: luanrz&amp;#39;s blog paginate: 5 theme: PaperMod # 右上角菜单项 menu: main: - identifier: home name: 首页 url: / weight: 10 - identifier: search name: 搜索 url: /search/ weight: 20 - identifier: archives name: 归档 url: /archives/ weight: 30 - identifier: categories name: 分类 url: /categories/ weight: 40 - identifier: tags name: 标签 url: /tags/ weight: 50 # 与Search搭配使用 outputs: home: - HTML - RSS - JSON # 必填，不加此节点Search无法使用 params: defaultTheme: auto # 主题颜色：auto、dark、light disableSpecial1stPost: true # 在Regular模式下禁用Home-Info区域，该开关在Home-Info模式和Profile模式无意义 hideSummary: true # 隐藏文章列表项的概述信息 hidemeta: true # 隐藏文章列表项的元数据，如：ReadingTime、WordCount等等 ShowReadingTime: true # 显示读完的预计时间（hidemeta为false才有意义） ShowWordCount: true # 显示统计字数（hidemeta为false才有意义） ShowCodeCopyButtons: true # 显示代码中的复制按钮 ShowPostNavLinks: true # 显示文章中上一篇和下一篇的链接 ShowBreadCrumbs: false # 显示面包屑导航 showtoc: false # 显示目录 tocopen: false # 显示的目录默认处于打开状态（showtoc为true才有意义） label: text: &amp;#34;luanrz&amp;#39;s blog&amp;#34; # 左上角logo区域的文字，如果不填将以全局的title值为准 # Home-Info homeInfoParams: Title: &amp;#34;luanrz的个人博客&amp;#34; # Home-Info区域的标题 Content: &amp;#34;“心有所向，日服一日，必有精进”&amp;#34; # Home-Info区域的内容 socialIcons: - name: bilibili # B站 url: &amp;#34;https://space.</description></item><item><title>Kubernetes入门</title><link>https://blog.luanrz.cn/posts/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/kubernetes%E5%85%A5%E9%97%A8/</link><pubDate>Fri, 01 Jul 2022 11:30:48 +0000</pubDate><guid>https://blog.luanrz.cn/posts/%E9%83%A8%E7%BD%B2%E8%BF%90%E7%BB%B4/kubernetes%E5%85%A5%E9%97%A8/</guid><description>&lt;p>kubernetes（k8s）是容器编排的利器。&lt;/p>
&lt;p>本文将介绍kubernetes本地环境的安装与基础使用，包括：创建集群、部署应用、故障排除、暴露服务、缩放应用、更新应用等内容，这里面大部分内容都来自于&lt;a href="https://kubernetes.io/zh-cn/docs/tutorials/">Kubernetes官方教程&lt;/a>。&lt;/p></description></item></channel></rss>